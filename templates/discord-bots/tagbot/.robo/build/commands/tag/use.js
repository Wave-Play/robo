import { getState } from 'robo.js'
import { dbNameSpace, tagScriptIntrepreter } from '../../consts.js'
import {
	ChannelTransformer,
	GuildTransformer,
	InteractionTransformer,
	MemberTransformer,
	UserTransformer
} from '@tagscript/plugin-discord'
export const config = {
	description: 'Access a saved tag',
	dmPermission: false,
	options: [
		{
			name: 'tag',
			description: 'Enter tag name',
			type: 'string',
			required: true
		}
	]
}
export default async (interaction) => {
	const tagName = interaction.options.get('tag')?.value ?? ''
	const TAG = getState(tagName.trim().toLowerCase().replaceAll(' ', '-'), {
		namespace: dbNameSpace()
	})
	if (!TAG) {
		return 'No tag exists with that name.'
	} else {
		const res = await tagScriptIntrepreter.run(TAG, {
			interaction: new InteractionTransformer(interaction),
			member: new MemberTransformer(interaction.member),
			user: new UserTransformer(interaction.user),
			guild: new GuildTransformer(interaction.guild),
			channel: new ChannelTransformer(interaction.channel)
		})
		return (
			res.body ?? {
				content: 'No direct response available for the specified tag',
				ephemeral: true
			}
		)
	}
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3VzZXIvcm9iby5qcy90ZW1wbGF0ZXMvZGlzY29yZC1ib3RzL3RhZ2JvdC9zcmMvY29tbWFuZHMvdGFnL3VzZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tYW5kSW50ZXJhY3Rpb24sIEd1aWxkLCBHdWlsZE1lbWJlciB9IGZyb20gJ2Rpc2NvcmQuanMnXG5pbXBvcnQgeyBnZXRTdGF0ZSwgdHlwZSBDb21tYW5kQ29uZmlnLCB0eXBlIENvbW1hbmRSZXN1bHQgfSBmcm9tICdyb2JvLmpzJ1xuaW1wb3J0IHsgZGJOYW1lU3BhY2UsIHRhZ1NjcmlwdEludHJlcHJldGVyIH0gZnJvbSAnLi4vLi4vY29uc3RzJ1xuaW1wb3J0IHtcblx0Q2hhbm5lbFRyYW5zZm9ybWVyLFxuXHRHdWlsZENoYW5uZWwsXG5cdEd1aWxkVHJhbnNmb3JtZXIsXG5cdEludGVyYWN0aW9uVHJhbnNmb3JtZXIsXG5cdE1lbWJlclRyYW5zZm9ybWVyLFxuXHRVc2VyVHJhbnNmb3JtZXJcbn0gZnJvbSAnQHRhZ3NjcmlwdC9wbHVnaW4tZGlzY29yZCdcblxuZXhwb3J0IGNvbnN0IGNvbmZpZzogQ29tbWFuZENvbmZpZyA9IHtcblx0ZGVzY3JpcHRpb246ICdBY2Nlc3MgYSBzYXZlZCB0YWcnLFxuXHRkbVBlcm1pc3Npb246IGZhbHNlLFxuXHRvcHRpb25zOiBbXG5cdFx0e1xuXHRcdFx0bmFtZTogJ3RhZycsXG5cdFx0XHRkZXNjcmlwdGlvbjogJ0VudGVyIHRhZyBuYW1lJyxcblx0XHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdFx0cmVxdWlyZWQ6IHRydWVcblx0XHR9XG5cdF1cbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKGludGVyYWN0aW9uOiBDb21tYW5kSW50ZXJhY3Rpb24pOiBQcm9taXNlPENvbW1hbmRSZXN1bHQ+ID0+IHtcblx0Y29uc3QgdGFnTmFtZSA9IChpbnRlcmFjdGlvbi5vcHRpb25zLmdldCgndGFnJyk/LnZhbHVlIGFzIHN0cmluZykgPz8gJydcblx0Y29uc3QgVEFHID0gZ2V0U3RhdGUodGFnTmFtZS50cmltKCkudG9Mb3dlckNhc2UoKS5yZXBsYWNlQWxsKCcgJywgJy0nKSwge1xuXHRcdG5hbWVzcGFjZTogZGJOYW1lU3BhY2UoKVxuXHR9KVxuXG5cdGlmICghVEFHKSB7XG5cdFx0cmV0dXJuICdObyB0YWcgZXhpc3RzIHdpdGggdGhhdCBuYW1lLidcblx0fSBlbHNlIHtcblx0XHRjb25zdCByZXMgPSBhd2FpdCB0YWdTY3JpcHRJbnRyZXByZXRlci5ydW4oVEFHLCB7XG5cdFx0XHRpbnRlcmFjdGlvbjogbmV3IEludGVyYWN0aW9uVHJhbnNmb3JtZXIoaW50ZXJhY3Rpb24pLFxuXHRcdFx0bWVtYmVyOiBuZXcgTWVtYmVyVHJhbnNmb3JtZXIoaW50ZXJhY3Rpb24ubWVtYmVyIGFzIEd1aWxkTWVtYmVyKSxcblx0XHRcdHVzZXI6IG5ldyBVc2VyVHJhbnNmb3JtZXIoaW50ZXJhY3Rpb24udXNlciksXG5cdFx0XHRndWlsZDogbmV3IEd1aWxkVHJhbnNmb3JtZXIoaW50ZXJhY3Rpb24uZ3VpbGQgYXMgR3VpbGQpLFxuXHRcdFx0Y2hhbm5lbDogbmV3IENoYW5uZWxUcmFuc2Zvcm1lcihpbnRlcmFjdGlvbi5jaGFubmVsIGFzIEd1aWxkQ2hhbm5lbClcblx0XHR9KSBcblx0XHRyZXR1cm4gKFxuXHRcdFx0cmVzLmJvZHkgPz8ge1xuXHRcdFx0XHRjb250ZW50OiAnTm8gZGlyZWN0IHJlc3BvbnNlIGF2YWlsYWJsZSBmb3IgdGhlIHNwZWNpZmllZCB0YWcnLFxuXHRcdFx0XHRlcGhlbWVyYWw6IHRydWVcblx0XHRcdH1cblx0XHQpXG5cdH1cbn1cbiJdLCJuYW1lcyI6WyJnZXRTdGF0ZSIsImRiTmFtZVNwYWNlIiwidGFnU2NyaXB0SW50cmVwcmV0ZXIiLCJDaGFubmVsVHJhbnNmb3JtZXIiLCJHdWlsZFRyYW5zZm9ybWVyIiwiSW50ZXJhY3Rpb25UcmFuc2Zvcm1lciIsIk1lbWJlclRyYW5zZm9ybWVyIiwiVXNlclRyYW5zZm9ybWVyIiwiY29uZmlnIiwiZGVzY3JpcHRpb24iLCJkbVBlcm1pc3Npb24iLCJvcHRpb25zIiwibmFtZSIsInR5cGUiLCJyZXF1aXJlZCIsImludGVyYWN0aW9uIiwidGFnTmFtZSIsImdldCIsInZhbHVlIiwiVEFHIiwidHJpbSIsInRvTG93ZXJDYXNlIiwicmVwbGFjZUFsbCIsIm5hbWVzcGFjZSIsInJlcyIsInJ1biIsIm1lbWJlciIsInVzZXIiLCJndWlsZCIsImNoYW5uZWwiLCJib2R5IiwiY29udGVudCIsImVwaGVtZXJhbCJdLCJtYXBwaW5ncyI6IkFBQ0EsU0FBU0EsUUFBUSxRQUFnRCxVQUFTO0FBQzFFLFNBQVNDLFdBQVcsRUFBRUMsb0JBQW9CLFFBQVEsa0JBQWM7QUFDaEUsU0FDQ0Msa0JBQWtCLEVBRWxCQyxnQkFBZ0IsRUFDaEJDLHNCQUFzQixFQUN0QkMsaUJBQWlCLEVBQ2pCQyxlQUFlLFFBQ1QsNEJBQTJCO0FBRWxDLE9BQU8sTUFBTUMsU0FBd0I7SUFDcENDLGFBQWE7SUFDYkMsY0FBYztJQUNkQyxTQUFTO1FBQ1I7WUFDQ0MsTUFBTTtZQUNOSCxhQUFhO1lBQ2JJLE1BQU07WUFDTkMsVUFBVTtRQUNYO0tBQ0E7QUFDRixFQUFDO0FBRUQsZUFBZSxDQUFBLE9BQU9DO0lBQ3JCLE1BQU1DLFVBQVUsQUFBQ0QsWUFBWUosT0FBTyxDQUFDTSxHQUFHLENBQUMsUUFBUUMsU0FBb0I7SUFDckUsTUFBTUMsTUFBTW5CLFNBQVNnQixRQUFRSSxJQUFJLEdBQUdDLFdBQVcsR0FBR0MsVUFBVSxDQUFDLEtBQUssTUFBTTtRQUN2RUMsV0FBV3RCO0lBQ1o7SUFFQSxJQUFJLENBQUNrQixLQUFLO1FBQ1QsT0FBTztJQUNSLE9BQU87UUFDTixNQUFNSyxNQUFNLE1BQU10QixxQkFBcUJ1QixHQUFHLENBQUNOLEtBQUs7WUFDL0NKLGFBQWEsSUFBSVYsdUJBQXVCVTtZQUN4Q1csUUFBUSxJQUFJcEIsa0JBQWtCUyxZQUFZVyxNQUFNO1lBQ2hEQyxNQUFNLElBQUlwQixnQkFBZ0JRLFlBQVlZLElBQUk7WUFDMUNDLE9BQU8sSUFBSXhCLGlCQUFpQlcsWUFBWWEsS0FBSztZQUM3Q0MsU0FBUyxJQUFJMUIsbUJBQW1CWSxZQUFZYyxPQUFPO1FBQ3BEO1FBQ0EsT0FDQ0wsSUFBSU0sSUFBSSxJQUFJO1lBQ1hDLFNBQVM7WUFDVEMsV0FBVztRQUNaO0lBRUY7QUFDRCxDQUFBLEVBQUMifQ==
